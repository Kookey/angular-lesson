/**
* @ngdoc method
* @name $rootScope.Scope#$on
* @kind function
*
* @description
* Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
* discussion of event life cycle.
*
* The event listener function format is: `function(event, args...)`. The `event` object
* passed into the listener has the following attributes:
*
*   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
*     `$broadcast`-ed.
*   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
*     event propagates through the scope hierarchy, this property is set to null.
*   - `name` - `{string}`: name of the event.
*   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
*     further event propagation (available only for events that were `$emit`-ed).
*   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
*     to true.
*   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
*
* @param {string} name Event name to listen on.
* @param {function(event, ...args)} listener Function to call when the event is emitted.
* @returns {function()} Returns a deregistration function for this listener.
*/
// 给定类型的监听事件。可以查看Scope#$emit $emit关于事件生存期的具体讨论
// 事件监听函数的格式：`function(event, args...)`。传入的事件对象含有如下属性：
// targetScope：通过`$emit` 或者`$broadcast`触发事件的scope
// currentScope：当前处理事件的scope,一旦事件传播通过scope层级，这个属性就被置null
// stopPropagation：是个函数，一旦调用stopPropagation函数将会取消进一步的事件传播（只对emit事件有效）
// preventDefault：函数，调用preventDefault函数将defaultPrevented变成true
// defaultPrevented：boolean ，当preventDefault调用时被设置成true

$on: function(name, listener) {
	//根据name从$$listeners中检出符合条件的namedListeners
var namedListeners = this.$$listeners[name];
//如果namedListeners不存在将$$listeners[name]和namedListeners设置成空数组
if (!namedListeners) {
  this.$$listeners[name] = namedListeners = [];
}
//将listener放入namedListeners数组中
namedListeners.push(listener);
//赋值当前scope赋值给局部变量current
var current = this;
//计算 current.$$listenerCount[name] 的数量
do {
  if (!current.$$listenerCount[name]) {
	current.$$listenerCount[name] = 0;
  }
  current.$$listenerCount[name]++;
} while ((current = current.$parent));

//赋值当前scope赋值给局部变量self
var self = this;
return function() {
	//检测listener在数组中是否存在，如果不存在
  var indexOfListener = namedListeners.indexOf(listener);
  if (indexOfListener !== -1) {
	  //1、namedListeners[indexOfListener]设置为null
	namedListeners[indexOfListener] = null;
	//current.$$listenerCount[name]数值减1
	decrementListenerCount(self, 1, name);
  }
};
},

function decrementListenerCount(current, count, name) {
  do {
	current.$$listenerCount[name] -= count;

	if (current.$$listenerCount[name] === 0) {
	  delete current.$$listenerCount[name];
	}
  } while ((current = current.$parent));
}


/**
* @ngdoc method
* @name $rootScope.Scope#$emit
* @kind function
*
* @description
* Dispatches an event `name` upwards through the scope hierarchy notifying the
* registered {@link ng.$rootScope.Scope#$on} listeners.
*
* The event life cycle starts at the scope on which `$emit` was called. All
* {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
* notified. Afterwards, the event traverses upwards toward the root scope and calls all
* registered listeners along the way. The event will stop propagating if one of the listeners
* cancels it.
*
* Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
* onto the {@link ng.$exceptionHandler $exceptionHandler} service.
*
* @param {string} name Event name to emit.
* @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
* @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
*/

// 调度一个'name'事件，通过scope层次结构向上通知(通过scope的$on方法注册的)注册的侦听器

// 这个event的生命周期起始于当前scope的$emit方法被调用。在当前scope的所有监听‘name’事件的监听器都会被通知。
// 然后这个事件会向上遍历直至root scope并且一路通知所有注册的监听器。这个event会被停止传播如果有一个监听器取消了它
// 通过Scope $on注册的监听器一旦有任何异常发出都会被传递给$exceptionHandler 服务进行处理
// name：事件的名称
// args：要传递的参数，可以是一个或者多个，如果是多个的话用‘,’隔开
// return 返回一个event对象


$emit: function(name, args) {
//定义一个空数组，当scope.$$listeners[name]不存在时使用
var empty = [],
	//事件'name'的所有监听器
	namedListeners,
	//先从当前scope开始查找
	scope = this,
	//默认不阻止事件传播
	stopPropagation = false,
	//定义一个event对象
	event = {
	  name: name,
	  targetScope: scope,
	  stopPropagation: function() {stopPropagation = true;},
	  preventDefault: function() {
		event.defaultPrevented = true;
	  },
	  defaultPrevented: false
	},
	//将event,arguments链接组成一个新的数组，文档：http://www.w3school.com.cn/jsref/jsref_concat_array.asp
	listenerArgs = concat([event], arguments, 1),
	i, length;
//do{} while(flag) ，作用是先执行，后判断是否满足条件，如果满足继续执行，如果不满足则退出执行，所以肯定会执行一次的
do {
  //通过事件的name找到当前scope中符合条件的监听器，如果不存在就使用一个空数组
  namedListeners = scope.$$listeners[name] || empty;
  //把scope赋值给currentScope，
  event.currentScope = scope;
  //遍历监听器集合
  for (i = 0, length = namedListeners.length; i < length; i++) {

	// if listeners were deregistered, defragment the array
	//如果监听器不存在，则重新整理数组
	if (!namedListeners[i]) {
	  //从监听器数组中删除指定位置的元素并返回删除后的数组，文档:http://www.w3school.com.cn/jsref/jsref_splice.asp
	  namedListeners.splice(i, 1);
	  i--;
	  length--;
	  continue;
	}
	try {
	  //allow all listeners attached to the current scope to run
	  //执行当前scopse上的所有监听器
	  namedListeners[i].apply(null, listenerArgs);
	} catch (e) {
		//如果出现异常，则交给exceptionHandler处理
	  $exceptionHandler(e);
	}
  }
  //if any listener on the current scope stops propagation, prevent bubbling
  //如果当前scope上的任何侦听器停止传播,阻止冒泡,则返回event
  if (stopPropagation) {
	event.currentScope = null;
	return event;
  }
  //traverse upwards
  //向上遍历scope
  scope = scope.$parent;
} while (scope);
//重置currentScope 为null
event.currentScope = null;

return event;
},


/**
* @ngdoc method
* @name $rootScope.Scope#$broadcast
* @kind function
*
* @description
* Dispatches an event `name` downwards to all child scopes (and their children) notifying the
* registered {@link ng.$rootScope.Scope#$on} listeners.
*
* The event life cycle starts at the scope on which `$broadcast` was called. All
* {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
* notified. Afterwards, the event propagates to all direct and indirect scopes of the current
* scope and calls all registered listeners along the way. The event cannot be canceled.
*
* Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
* onto the {@link ng.$exceptionHandler $exceptionHandler} service.
*
* @param {string} name Event name to broadcast.
* @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
* @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
*/
// 调度一个‘name’事件往下所有的子scope（和他们的后代）通知通过Scope.$on方法注册的监听器

// 这个event的生命周期起始于当前scope的`$broadcast`方法被调用。在当前scope的所有监听‘name’事件的监听器都会被通知。
// 然后，这个事件传播当前scope的所有直接和间接scope和沿途调用所有注册的监听器。事件不能被取消

// 通过Scope $on注册的监听器一旦有任何异常发出都会被传递给$exceptionHandler 服务进行处理

// name：事件的名称
// args：要传递的参数，可以是一个或者多个，如果是多个的话用‘,’隔开
// return 返回一个event对象

$broadcast: function(name, args) {
	定义 target,current,next 三个变量用来存储目标，当前，下一个三个对象
var target = this,
	current = target,
	next = target,
	//定义一个event对象
	event = {
	  name: name,
	  targetScope: target,
	  preventDefault: function() {
		event.defaultPrevented = true;
	  },
	  defaultPrevented: false
	};

	//如果目标对象的‘name’事件的监听器不存在则直接返回event对象
if (!target.$$listenerCount[name]) return event;

//将event,arguments链接组成一个新的数组
var listenerArgs = concat([event], arguments, 1),
	listeners, i, length;

//down while you can, then up and next sibling or up and next sibling until back at root
while ((current = next)) {
  //将current赋值给currentScope
  event.currentScope = current;
  //通过事件的name找到当前scope中中符合条件的监听器，如果不存在就使用一个空数组
  listeners = current.$$listeners[name] || [];
  for (i = 0, length = listeners.length; i < length; i++) {
	// if listeners were deregistered, defragment the array
	// 如果监听器不存在，则重新整理数组
	if (!listeners[i]) {
	  listeners.splice(i, 1);
	  i--;
	  length--;
	  continue;
	}

	try {
	  //执行当前scopse上的所有监听器
	  listeners[i].apply(null, listenerArgs);
	} catch (e) {
	  //如果出现异常，则交给exceptionHandler处理
	  $exceptionHandler(e);
	}
  }
  
  // AngularJS的作用域还存在如下内部定义的关系：
  // scope.$parent指向scope的父作用域；
  // scope.$$childHead指向scope的第一个子作用域；
  // scope.$$childTail指向scope的最后一个子作用域；
  // scope.$$nextSibling指向scope的下一个相邻作用域；
  // scope.$$prevSibling指向scope的上一个相邻作用域；

  // Insanity Warning: scope depth-first traversal
  // yes, this code is a bit crazy, but it works and we have tests to prove it!
  // this piece should be kept in sync with the traversal in $digest
  // (though it differs due to having the extra check for $$listenerCount)
  //警告：深度优先遍历scope
  if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
	  (current !== target && current.$$nextSibling)))) {
	while (current !== target && !(next = current.$$nextSibling)) {
	  current = current.$parent;
	}
  }
}

event.currentScope = null;
return event;
}
};